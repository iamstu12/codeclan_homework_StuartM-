ratings_count > 100000
& average_rating >= 3.5)
# this function allows you to filter and view all Stephen King books that
# have a ratings count of over 100,000
# AND have an average rating that equal to 4 and above
filter(goodreads_books, authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4)
# this function allows you to filter and view all Stephen King books that
# have a ratings count of over 100,000
# AND have an average rating that equal to 4 and above
stephen_king_top_rated <- goodreads_books %>%
filter(authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4) %>%
arrange(desc(average_rating))
# this function allows you to arrange the ratings count column by descending
# order to see which book has the highest 'count'
View(stephen_king_top_rated)
View(stephen_king_top_rated)
stephen_king_top_rated <- goodreads_books %>%
filter(authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
select(title, authors, average_rating, ratings_count)
# this function allows you to arrange the ratings count column by descending
# order to see which book has the highest 'count'
View(stephen_king_top_rated)
stephen_king_top_rated <- goodreads_books %>%
filter(authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
select(title, authors, average_rating, ratings_count)
# this function allows you to arrange the average rating by
# descending order AND select four specific columns
goodreads_books_rating_count <- goodreads_books %>%
mutate(
high_or_low_rating_count = case_when(
ratings_count < 500000 ~ "Very Low Count",
ratings_count < 1000000 ~ "Low Count",
ratings_count < 1500000 ~ "Medium Count",
ratings_count < 2000000 ~ "High Count",
ratings_count >= 2000000 ~ "Very High Count"
)
)
# this function groups the ratings count in increments of 500,000
# a ratings count up to 500,000 is very low
# a ratings count from 500,000 to 1 million is low
# a ratings count from 1 million to 1.5 million is medium
# a ratings count from 1.5 million to 2 million is high AND
# a ratings count over 2 million is very high
stephen_king_top_rated_movies <- stephen_king_top_rated %>%
filter(authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
select(title, authors, average_rating, ratings_count)
stephen_king_top_rated_movies <- stephen_king_top_rated %>%
filter(authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
select(title, authors, average_rating, ratings_count)
View(stephen_king_top_rated)
stephen_king_top_rated_movies <- stephen_king_top_rated %>%
filter(authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
select(title, authors, average_rating, ratings_count) %>%
mutate(
movie = case_when(title(
"The Green Mile" ~ "Yes"
)
))
stephen_king_top_rated_movies <- stephen_king_top_rated %>%
filter(authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
select(title, authors, average_rating, ratings_count) %>%
mutate(
movie = case_when(title(
"The Green Mile" ~ "Yes"
)
))
movie = case_when(title(
stephen_king_top_rated_movies <- stephen_king_top_rated %>%
filter(authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
select(title, authors, average_rating, ratings_count) %>%
mutate(
movie = case_when(title(
"The Green Mile" ~ "Yes"
)
))
stephen_king_top_rated_movies <- stephen_king_top_rated %>%
filter(authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
select(title, authors, average_rating, ratings_count) %>%
mutate(
high_or_low_rating_count = case_when(
ratings_count < 250000 ~ "Low",
ratings_count >= 250000 ~ "High"
)
)
View(stephen_king_top_rated_movies)
stephen_king_top_rated <- stephen_king_top_rated %>%
filter(authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
select(title, authors, average_rating, ratings_count) %>%
mutate(
high_or_low_rating_count = case_when(
ratings_count < 250000 ~ "Low",
ratings_count >= 250000 ~ "High"
)
)
View(stephen_king_top_rated)
View(stephen_king_top_rated_movies)
stephen_king_top_rated <- stephen_king_top_rated %>%
filter(authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
select(title, authors, average_rating, ratings_count) %>%
mutate(
high_or_low_rating_count = case_when(
ratings_count < 250000 ~ "Low",
ratings_count >= 250000 ~ "High"))
View(stephen_king_top_rated_movies)
library(tidyverse)
goodreads_books <- read_csv("data/books.csv")
view(goodreads_books)
# this allows you to view the entire data set
dim(goodreads_books)
# this checks how many rows and columns in the data set
names(goodreads_books)
# this tells you what the column titles are
head(goodreads_books, 10)
# this gives you the first 10 rows by default
tail(goodreads_books, 10)
# this gives you the last 10 rows by default
goodreads_books %>%
filter(is.na(goodreads_books))
# this function filters the data to check for any 'NAs'
select(goodreads_books, title, average_rating)
# this function selects specific columns to view
filter(goodreads_books, authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4)
# this function allows you to filter and view all Stephen King books that
# have a ratings count of over 100,000
# AND have an average rating that equal to 4 and above
stephen_king_top_rated <- goodreads_books %>%
filter(authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
select(title, authors, average_rating, ratings_count)
# this function allows you to arrange the average rating by
# descending order AND select four specific columns
stephen_king_top_rated <- stephen_king_top_rated %>%
filter(authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
select(title, authors, average_rating, ratings_count) %>%
mutate(
high_or_low_rating_count = case_when(
ratings_count < 250000 ~ "Low",
ratings_count >= 250000 ~ "High"))
# this function adds a new column that tells you what book
# has had a 'high' number of ratings or a 'low' number of ratings
goodreads_books_rating_count <- goodreads_books %>%
mutate(
high_or_low_rating_count = case_when(
ratings_count < 500000 ~ "Very Low Count",
ratings_count < 1000000 ~ "Low Count",
ratings_count < 1500000 ~ "Medium Count",
ratings_count < 2000000 ~ "High Count",
ratings_count >= 2000000 ~ "Very High Count"
)
)
# this function groups the ratings count in increments of 500,000
# a ratings count up to 500,000 is very low
# a ratings count from 500,000 to 1 million is low
# a ratings count from 1 million to 1.5 million is medium
# a ratings count from 1.5 million to 2 million is high AND
# a ratings count over 2 million is very high
View(goodreads_books_rating_count)
View(stephen_king_top_rated)
View(goodreads_books_rating_count)
filter(goodreads_books_rating_count, high_or_low_rating_count == "Very High"
filter(goodreads_books_rating_count, high_or_low_rating_count == "Very High")
filter(goodreads_books_rating_count, high_or_low_rating_count == "Very High Count")
filter(goodreads_books_rating_count, high_or_low_rating_count == "Very High Count",
average_rating >= 4)
filter(goodreads_books_rating_count, high_or_low_rating_count == "Very High Count",
average_rating >= 4) %>%
arrange(desc(average_rating))
filter(goodreads_books_rating_count, high_or_low_rating_count == "Very High Count",
average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
head(5)
top_five_books <- goodreads_books_rating_count %>%
filter(goodreads_books_rating_count, high_or_low_rating_count == "Very High Count",
average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
head(5)
top_five_books <- goodreads_books_rating_count %>%
filter(high_or_low_rating_count == "Very High Count",
average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
head(5)
top_five_books <- goodreads_books_rating_count %>%
filter(high_or_low_rating_count == "Very High Count",
average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
head(5)
top_five_books <- goodreads_books_rating_count %>%
filter(high_or_low_rating_count == "Very High Count",
average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
head(5)
View(top_five_books)
top_five_books <- goodreads_books_rating_count %>%
filter(high_or_low_rating_count == "Very High Count",
average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
head(5) %>%
select(title, authors, average_rating, ratings_count)
View(stephen_king_top_rated)
View(top_five_books)
View(stephen_king_top_rated)
View(goodreads_books_rating_count)
top_five_books <- goodreads_books_rating_count %>%
filter(high_or_low_rating_count == "Very High Count",
average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
head(5) %>%
select(title, authors, average_rating, ratings_count, high_or_low_rating_count)
View(top_five_books)
top_five_stephen_king <- goodreads_books %>%
filter(authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
select(title, authors, average_rating, ratings_count)
# this function allows you to arrange the average rating by
# descending order AND select four specific columns
library(tidyverse)
goodreads_books <- read_csv("data/books.csv")
view(goodreads_books)
# this allows you to view the entire data set
dim(goodreads_books)
# this checks how many rows and columns in the data set
names(goodreads_books)
# this tells you what the column titles are
head(goodreads_books, 10)
# this gives you the first 10 rows by default
tail(goodreads_books, 10)
# this gives you the last 10 rows by default
goodreads_books %>%
filter(is.na(goodreads_books))
# this function filters the data to check for any 'NAs'
select(goodreads_books, title, average_rating)
# this function selects specific columns to view
filter(goodreads_books, authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4)
# this function allows you to filter and view all Stephen King books that
# have a ratings count of over 100,000
# AND have an average rating that equal to 4 and above
top_five_stephen_king <- goodreads_books %>%
filter(authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
select(title, authors, average_rating, ratings_count)
# this function allows you to arrange the average rating by
# descending order AND select four specific columns
stephen_king_top_rated <- stephen_king_top_rated %>%
filter(authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
select(title, authors, average_rating, ratings_count) %>%
mutate(
high_or_low_rating_count = case_when(
ratings_count < 250000 ~ "Low",
ratings_count >= 250000 ~ "High"))
library(tidyverse)
goodreads_books <- read_csv("data/books.csv")
view(goodreads_books)
# this allows you to view the entire data set
dim(goodreads_books)
# this checks how many rows and columns in the data set
names(goodreads_books)
# this tells you what the column titles are
head(goodreads_books, 10)
# this gives you the first 10 rows by default
tail(goodreads_books, 10)
# this gives you the last 10 rows by default
goodreads_books %>%
filter(is.na(goodreads_books))
# this function filters the data to check for any 'NAs'
select(goodreads_books, title, average_rating)
# this function selects specific columns to view
filter(goodreads_books, authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4)
# this function allows you to filter and view all Stephen King books that
# have a ratings count of over 100,000
# AND have an average rating that equal to 4 and above
top_five_stephen_king <- goodreads_books %>%
filter(authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
select(title, authors, average_rating, ratings_count)
# this function allows you to arrange the average rating by
# descending order AND select four specific columns
stephen_king_top_rated <- stephen_king_top_rated %>%
filter(authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
select(title, authors, average_rating, ratings_count) %>%
mutate(
high_or_low_rating_count = case_when(
ratings_count < 250000 ~ "Low",
ratings_count >= 250000 ~ "High"))
library(tidyverse)
top_five_stephen_king <- top_five_stephen_king %>%
filter(authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
select(title, authors, average_rating, ratings_count) %>%
mutate(
high_or_low_rating_count = case_when(
ratings_count < 250000 ~ "Low",
ratings_count >= 250000 ~ "High"))
# this function adds a new column that tells you what book
# has had a 'high' number of ratings or a 'low' number of ratings
goodreads_books_rating_count <- goodreads_books %>%
mutate(
high_or_low_rating_count = case_when(
ratings_count < 500000 ~ "Very Low Count",
ratings_count < 1000000 ~ "Low Count",
ratings_count < 1500000 ~ "Medium Count",
ratings_count < 2000000 ~ "High Count",
ratings_count >= 2000000 ~ "Very High Count"
)
)
# this function groups the ratings count in increments of 500,000
# a ratings count up to 500,000 is very low
# a ratings count from 500,000 to 1 million is low
# a ratings count from 1 million to 1.5 million is medium
# a ratings count from 1.5 million to 2 million is high AND
# a ratings count over 2 million is very high
top_five_books <- goodreads_books_rating_count %>%
filter(high_or_low_rating_count == "Very High Count",
average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
head(5) %>%
select(title, authors, average_rating, ratings_count, high_or_low_rating_count)
View(top_five_books)
View(goodreads_books_rating_count)
top_five_90s_books <- goodreads_books_rating_count %>%
filter(between(publication_date, 01/01/1990, 12/31/1999))
View(top_five_90s_books)
top_five_90s_books <- goodreads_books_rating_count %>%
filter(between(publication_date, "01/01/1990", "12/31/1999"))
top_five_90s <- goodreads_books_rating_count %>%
filter(between(publication_date, "01/01/1990", "12/31/1999"))
View(goodreads_books_rating_count)
view(goodreads_books_rating_count)
as_numeric(as_character(goodreads_books_rating_count$publication_date))
as.numeric(as.character(goodreads_books_rating_count$publication_date))
View(goodreads_books_rating_count)
goodreads_books_rating_count %>%
mutate(publication_date = as.numeric(publication_date))
goodreads_books_rating_count %>%
mutate(publication_date = as_numeric(publication_date))
goodreads_books_rating_count %>%
mutate(publication_date = as.numeric(publication_date))
View(goodreads_books_rating_count)
top_five_90s <- goodreads_books_rating_count %>%
filter(between(publication_date, "01/01/1990", "12/31/1999"))
library(tidyverse)
goodreads_books <- read_csv("data/books.csv")
view(goodreads_books)
# this allows you to view the entire data set
dim(goodreads_books)
# this checks how many rows and columns in the data set
names(goodreads_books)
# this tells you what the column titles are
head(goodreads_books, 10)
# this gives you the first 10 rows by default
tail(goodreads_books, 10)
# this gives you the last 10 rows by default
goodreads_books %>%
filter(is.na(goodreads_books))
# this function filters the data to check for any 'NAs'
select(goodreads_books, title, average_rating)
# this function selects specific columns to view
filter(goodreads_books, authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4)
# this function allows you to filter and view all Stephen King books that
# have a ratings count of over 100,000
# AND have an average rating that equal to 4 and above
top_five_stephen_king <- goodreads_books %>%
filter(authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
select(title, authors, average_rating, ratings_count)
# this function allows you to arrange the average rating by
# descending order AND select four specific columns
top_five_stephen_king <- top_five_stephen_king %>%
filter(authors == "Stephen King",
ratings_count > 100000
& average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
select(title, authors, average_rating, ratings_count) %>%
mutate(
high_or_low_rating_count = case_when(
ratings_count < 250000 ~ "Low",
ratings_count >= 250000 ~ "High"))
# this function adds a new column that tells you what book
# has had a 'high' number of ratings or a 'low' number of ratings
goodreads_books_rating_count <- goodreads_books %>%
mutate(
high_or_low_rating_count = case_when(
ratings_count < 500000 ~ "Very Low Count",
ratings_count < 1000000 ~ "Low Count",
ratings_count < 1500000 ~ "Medium Count",
ratings_count < 2000000 ~ "High Count",
ratings_count >= 2000000 ~ "Very High Count"
)
)
# this function groups the ratings count in increments of 500,000
# a ratings count up to 500,000 is very low
# a ratings count from 500,000 to 1 million is low
# a ratings count from 1 million to 1.5 million is medium
# a ratings count from 1.5 million to 2 million is high AND
# a ratings count over 2 million is very high
top_five_books <- goodreads_books_rating_count %>%
filter(high_or_low_rating_count == "Very High Count",
average_rating >= 4) %>%
arrange(desc(average_rating)) %>%
head(5) %>%
select(title, authors, average_rating, ratings_count, high_or_low_rating_count)
top_five_90s <- goodreads_books_rating_count %>%
filter(between(publication_date, "01/01/1990", "12/31/1999"))
goodreads_books_rating_count %>%
mutate(publication_date = as.numeric(publication_date))
as.Date(goodreads_books_rating_count$publication_date,
format = "%m/%d/%y")
class(goodreads_books_rating_count$publication_date)
View(goodreads_books_rating_count)
as.Date(goodreads_books_rating_count$publication_date,
format = "%m/%d/%y")
as.Date(goodreads_books_rating_count$publication_date,
format = "%m/%d/%y")
class(goodreads_books_rating_count$publication_date)
class(goodreads_books_rating_count$publication_date)
goodreads_books_date <- as.Date(goodreads_books_rating_count$publication_date,
format = "%m/%d/%y")
class(goodreads_books_date$publication_date)
goodreads_books_date <- as.Date(goodreads_books_rating_count$publication_date,
format = "%m/%d/%y")
class(goodreads_books_date)
View(goodreads_books_rating_count)
years(goodreads_books_date)
year(goodreads_books_date)
goodreads_books_date <- as.Date(goodreads_books_rating_count$publication_date,
format = "%m/%d/%y")
class(goodreads_books_date)
goodreads_books_date
goodreads_books_date <- as.Date(goodreads_books_rating_count$publication_date,
format = "%m/%d/%y")
class(goodreads_books_date)
str(goodreads_books_rating_count)
str(goodreads_books_date)
goodreads_books_rating_count$publication_date <- as.Date(goodreads_books_rating_count$publication_date,
format = "%m/%d/%y")
class(goodreads_books_date)
str(goodreads_books_date)
View(goodreads_books)
goodreads_books_rating_count$publication_date <- as.Date(goodreads_books_rating_count$publication_date, "%m/%d/%y")
View(goodreads_books)
goodreads_books_rating_count$publication_date <- as.Date(goodreads_books_rating_count$publication_date, "%m/%d/%Y")
View(goodreads_books_rating_count)
goodreads_books_rating_count$publication_date <- as.Date(goodreads_books_rating_count$publication_date,
format = "%m/%d/%Y")
View(goodreads_books_rating_count)
View(goodreads_books)
library(tidyverse)
library(lubridate)
goodreads_books_rating_count$publication_date <- mdy(goodreads_books_rating_count$publication_date)
View(goodreads_books_rating_count)
